Short introduction :
Alenka supports several data types : integers, floats, decimals and character strings.
The difference between floats and decimals is that the latter are compressed when written to a file.

Requirements : you need to have a Fermi GPU : models 400, 500 and 600 should do.
Limitations : 
A.  join ops supported only for integers and only for unique keys. I'll implement support for the other types shortly.
B.  all column names in a script must be unique.

Loading data for processing : 
Alenka can read text files with fields separated by separators. But much faster way to read the data would be to load it into binary files as demonstrated by the following script :

C := STREAM 'date.tbl' USING ('|') AS (d_datekey{1}:int, d_month{4}:varchar(9), d_year{5}:int, d_yearmonthnum{6}:int, d_yearmonth{7}:varchar(7), 
                                            d_weeknuminyear{12}:int);
STORE C INTO 'date' BINARY;

This script read file date.tbl with fields separated by tabs. Field d_datekey is the first field in a file, d_month - fourth field and so on.
Since alenka is a columnar database the fields will be compressed and stored in separate files with names like date.1, date.4 etc.

Compression. In Alenka compression and decompression is transparent to the user. Alenka uses FOR(frame of reference), FOR-DELTA and dictionary compression.
Decimal and integer fields are compressed by FOR and FOR-DELTA(when data are already sorted). Strings are compressed by dictionary compression.
Like all other oparations compression and decompression are done on the GPU.

Once we created the data files we can do the data processing : 

O := LOAD 'orders' BINARY AS (o_orderkey{1}:int, o_custkey{2}:int, o_orderdate{5}:int, o_shippriority{8}:int);
OFI := FILTER O BY o_orderdate < 19950315;
C := LOAD 'customer' BINARY AS (c_custkey{1}:int, c_mktsegment{7}:varchar(10));
CF := FILTER C BY c_mktsegment == "BUILDING";
L := LOAD 'lineitem' BINARY AS (l_orderkey{1}:int,  price{6}:decimal, discount{7}:decimal, shipdate{11}:int);
LF := FILTER L BY shipdate > 19950315;
OL := SELECT  o_orderkey AS o_orderkey, o_orderdate AS o_orderdate, o_shippriority AS o_shippriority
      FROM OFI JOIN CF ON o_custkey = c_custkey;
OLC := SELECT o_orderkey AS o_orderkey, o_orderdate AS o_orderdate, o_shippriority AS o_shippriority, price AS price, discount AS discount 
       FROM LF JOIN OL ON l_orderkey = o_orderkey;
F := SELECT o_orderkey AS o_orderkey1, o_orderdate AS orderdate1, o_shippriority AS shippriority1,
             SUM(price*(1-discount)) AS sum_revenue, COUNT(o_orderkey) AS cnt  FROM OLC 
 	  GROUP BY o_orderkey, o_orderdate, o_shippriority;			  
RES := ORDER F BY sum_revenue DESC, orderdate1 ASC;	   
STORE RES INTO 'mytest.txt' USING ('|') LIMIT 10;	


To compile alenka you need to download NVidia's CUDA. You will also need CUDPP library : see CUDPP project site for install instructions : http://code.google.com/p/cudpp/
To compile alenka executable run the following command : 
nvcc -arch sm_20 -L"cudpp_src_2.0/lib" -lcuda -lcudpp -lcudpp_hash  ./bison.cu -o ./alenka

Alenka have been tested on a 64bit Windows7 and Linux. Hash joins have beed tested on Linux only.
When you compiled alenka you can run it from a command line using a SQL script file as a parameter : alenka.exe q1.sql 


Alenka is distributed under Apache 2 license.

antonmks@gmail.com  
 

